1.1 定义
将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示

1.2 主要作用
在用户不知道对象的建造过程和细节的情况下就可以直接创建复杂的对象。
    用户只需要给出指定复杂对象的类型和内容；
    建造者模式负责按顺序创建复杂对象（把内部的建造过程和细节隐藏起来)

1.3 解决的问题
方便用户创建复杂的对象（不需要知道实现过程）
代码复用性 & 封装性（将对象构建过程和细节进行封装 & 复用）
    例子：造汽车 & 买汽车。
     1. 工厂（建造者模式）：负责制造汽车（组装过程和细节在工厂内）
     2. 汽车购买者（用户）：你只需要说出你需要的型号（对象的类型和内容），然后直接购买就可以使用了
    （不需要知道汽车是怎么组装的（车轮、车门、发动机、方向盘等等））

1.4 角色
在这样的设计模式中，有以下几个角色：
1、Builder：为创建一个产品对象的各个部件指定抽象接口。
2、ConcreteBuilder：实现Builder的接口以构造和装配该产品的各个部件，定义并明确它所创建的表示，并提供一个检索产品的接口。
3、Director：构造一个使用Builder接口的对象，指导构建过程。
4、Product：表示被构造的复杂对象。ConcreteBuilder创建该产品的内部表示并定义它的装配过程，包含定义组成部件的类，包括将这些部件装配成最终产品的接口。

1.5 实例概况
背景：小成希望去电脑城买一台组装的台式主机
过程：
    电脑城老板（Diretor）和小成（Client）进行需求沟通（买来打游戏？学习？看片？）
    了解需求后，电脑城老板将小成需要的主机划分为各个部件（Builder）的建造请求（CPU、主板...）
    指挥装机人员（ConcreteBuilder）去构建组件；
    将组件组装起来成小成需要的电脑（Product）